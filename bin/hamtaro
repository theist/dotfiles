#!/usr/bin/env python
import datetime, re, sys

def date_to_string(date):
    """Return a string with the date"""
    return "{}-{:02d}-{:02d}".format(date.year, date.month, date.day)

def this_weeks_monday():
    """Return the date of the Monday of this week"""
    today = datetime.date.today()
    monday = today - datetime.timedelta(days=today.weekday())
    return date_to_string(monday)

def last_weeks_monday():
    """Return the date of the Monday of last week"""
    today = datetime.date.today()
    monday = today - datetime.timedelta(days=today.weekday() + 7)
    return date_to_string(monday)

def last_weeks_sunday():
    """Return the date of the Sunday of last week"""
    today = datetime.date.today()
    sunday = today - datetime.timedelta(days=today.weekday() + 1)
    return date_to_string(sunday)

def today():
    """Return the date of today"""
    return date_to_string(datetime.date.today())

def get_total_from_output(output):
    """Return the total from the output"""
    totlas_line = ""
    for line in output.split("\n"):
        if line.startswith("Total"):
            totals_line = line
    return totals_line

def parse_hamster_time(time_str):
    """Parse the time from the hamster output"""
    hours = 0
    minutes = 0

    # Match hours
    hours_match = re.search(r'(\d+)h', time_str)
    if hours_match:
        hours = int(hours_match.group(1))

    # Match minutes
    minutes_match = re.search(r'(\d+)min', time_str)
    if minutes_match:
        minutes = int(minutes_match.group(1))
    return (hours, minutes)

def calculate_hours(time_str):
    hours, minutes = parse_hamster_time(time_str)

    return hours + (minutes / 60.0)

def calculate_hours_minutes(time_str):
    hours, minutes = parse_hamster_time(time_str)

    return  "{:02}:{:02}".format(hours, minutes)

def run_shell_command(command):
    """Run a shell command and return the stdout output"""
    import subprocess
    import sys
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    return output.decode('utf-8')

def hamster_week_hours():
    today_string = today()
    monday_string = this_weeks_monday()
    res = run_shell_command("hamster list {} {}".format(monday_string, today_string))
    res = get_total_from_output(res)
    return calculate_hours(res)

def hamster_today_hours():
    """Return the hours of hamster today"""
    res = run_shell_command("hamster list")
    res = get_total_from_output(res)
    return calculate_hours(res)

def hamster_activity():
    """Return the activity of hamster today"""
    hamster_current = run_shell_command("hamster current")
    activity = hamster_current[:-1]
    if activity == "Sin actividad":
        return activity
    activity = activity.split(" ")
    return "{} {}".format(" ".join(activity[2:-1]), activity[-1])


def do_summary():
    """Print a summary of the hamster activity"""
    today_string = today()
    monday_string = this_weeks_monday()

    if check_args("previous") or check_args("prev") or check_args("last"):
        today_string = last_weeks_sunday()
        monday_string = last_weeks_monday()

    res = run_shell_command("hamster list {} {}".format(monday_string, today_string))
    lines = res.split("\n")
    lines_per_date = {}
    for line in lines[:-1]:
        if line.startswith("---") or line.startswith("Inicio") or line.startswith("Sin"):
            continue
        date = line.split(" ")[0]
        if date not in lines_per_date:
            lines_per_date[date] = []
        lines_per_date[date].append(line)
    for date in lines_per_date:
        print(date)
        for line in lines_per_date[date]:
            if line.startswith("20"):
                columns = line.split("|")
                if re.search(r'^ +$', columns[1]):
                    columns[1] = " - --:--"
                print("    {} | {} | {} -> {}".format(calculate_hours_minutes(columns[2]),columns[0].split(" ")[1], columns[1].split(" ")[2], columns[3]))
        print()

def check_args(arg):
    """Check if the argument is in the arguments"""
    import sys
    if arg in sys.argv:
        sys.argv.remove(arg)
        return True
    return arg in sys.argv

if __name__ == "__main__":
    """Hamster line  <actividad>/<dia>/<semana>"""
    if check_args("summary"):
        do_summary()
        sys.exit(0)
    print("{} (today: {:.2f}h|week: {:.2f}h)".format(hamster_activity(), hamster_today_hours(), hamster_week_hours()))
